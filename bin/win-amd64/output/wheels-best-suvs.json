This is a large amount of HTML code from the Forbes Wheels website, which is designed to display information about SUVs. It's challenging to extract meaningful data from this code without a tool specifically designed for HTML parsing.

Here are some observations and potential ways to extract data:

**Structure:**

* The code is structured with a lot of nested lists and divs, likely reflecting the hierarchical nature of the content. 
* There are a lot of classes and IDs that can be used to pinpoint specific elements (e.g. "aawp-product__description", "footer-links").

**Data Points:**

* **SUVs:** The code contains a lot of information about different SUVs, categorized by size (Compact, Midsize, Large), features (Hybrid, 3-Row, Off-Road), and even lists of "Best" SUVs in various categories.
* **Reviews:** Each SUV appears to have a link to a review page, likely with more detailed information.
* **Pricing:** Starting prices are mentioned for some SUVs.
* **URLs:** The page includes links to other relevant Forbes Wheels articles.

**How to Extract Data:**

* **HTML Parser:** The best approach would be to use an HTML parser (like BeautifulSoup in Python) to analyze the structure of the code and extract the desired information. You can target specific elements based on their classes and IDs.
* **Regex:** You could use regular expressions to find patterns in the code and extract specific data points. However, this is generally less reliable for complex HTML.
* **API:** If Forbes Wheels has a public API, that would be the most efficient way to get structured data.

**Example (Python with BeautifulSoup):**

```python
from bs4 import BeautifulSoup

# Fetch the HTML content (replace with actual URL)
html = requests.get("https://www.forbes.com/wheels/best/suvs/").text

# Create a BeautifulSoup object
soup = BeautifulSoup(html, 'html.parser')

# Extract SUVs
suvs = soup.find_all("div", class_="aawp-product--horizontal")

for suv in suvs:
    title = suv.find("h2", class_="aawp-product__title").text.strip()
    description = suv.find("div", class_="aawp-product__description").text.strip()
    starting_price = suv.find("div", class_="aawp-product__price").text.strip()
    # ... extract other data points based on element classes

    print(f"SUV: {title}")
    print(f"Description: {description}")
    print(f"Starting Price: {starting_price}")
```

**Remember:**

* The structure of the HTML code might change, so your extraction logic might need to be adjusted. 
* Make sure to follow Forbes Wheels' terms of service when scraping data from their website.

Let me know if you have a specific type of data you want to extract. I can then provide more tailored instructions. 
